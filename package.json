{
  "name": "openapi-camunda-key-flattener",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "npm run lint",
    "camunda:clean": "rm -rf camunda/data && docker compose -f camunda/operate/docker-compose.yml stop elasticsearch",
    "camunda:es:start": "docker compose -f camunda/operate/docker-compose.yml up -d elasticsearch",
    "camunda:es:shhh": "curl -X PUT \"http://localhost:9200/_cluster/settings\" -H \"Content-Type: application/json\" -d '{ \"persistent\":{\"logger.org.elasticsearch.deprecation\": \"OFF\"}}'",
    "camunda:es:stop": "docker compose -f camunda/operate/docker-compose.yml stop elasticsearch",
    "spec:update": "cd camunda && git reset --hard && git clean -fd && git pull && cd .. && cp camunda/zeebe/gateway-protocol/src/main/proto/rest-api.yaml rest-api.yaml",
    "docs:generate": "cp ./rest-api.domain.yaml ./camunda-docs/api/camunda/camunda-openapi.yaml && npm run --prefix camunda-docs api:generate:camunda",
    "docs:start": "npm run --prefix camunda-docs start",
    "spec:go": "npm run spec:generate && npm run lint && npm run spec:install && npm run spec:build && npm run spec:verify",
    "spec:install": "cp rest-api.generated.yaml camunda/zeebe/gateway-protocol/src/main/proto/rest-api.yaml",
    "spec:build": "cd camunda && ./mvnw package -Dquickly -T1C",
    "spec:verify": "cd camunda && ./mvnw verify -DskipChecks -DskipUTs -T1C -Dquickly",
    "spec:generate": "cd java/openapi-camunda-key-flattener && mvn clean compile exec:java",
    "spec:consistency": "cd java/rest-api-consistency-analyzer && ./verify-domain.sh",
    "lint": "npm run lint:domain && npm run lint:generated",
    "lint:original": "vacuum lint rest-api.yaml --ruleset vacuum/vacuum-ruleset.yaml --functions vacuum/vacuum-rules --details --no-clip --errors",
    "lint:domain": "spectral lint rest-api.domain.yaml",
    "lint:generated": "vacuum lint rest-api.generated.yaml --ruleset vacuum/vacuum-ruleset.yaml --functions vacuum/vacuum-rules --details --no-clip --errors",
    "sdks:install": "cd sdks/tools && npm install",
    "sdks:generate": "npm run sdks:clean && cd sdks/tools && ts-node ./generate-all-sdks.ts",
    "sdks:clean": "cross-env rimraf sdks/generated/*",
    "sdks:list": "ls -la sdks/generated | grep '^d' || echo 'No SDKs generated yet'",
    "prebuild:sdks": "npm run sdks:clean",
    "build:sdks": "npm run sdks:install && npm run sdks:generate",
    "postbuild:sdks": "echo 'âœ… SDKs generated in ./sdks/generated' && npm run sdks:list",
    "watch:spec": "nodemon --watch rest-api.domain.yaml --exec 'npm run build:sdks'",
    "test:sdks": "npm run sdks:install && cd sdks/tools && npm run test",
    "test:typescript": "cd sdks/tests/typescript && npm test",
    "test:ts:integration": "cd sdks/tests/typescript && npx jest integration",
    "testsuite:generate": "cd api-test/semantic-graph-extractor && npm run extract-graph && cd ../path-analyser && npm run build && node dist/src/index.js && npm run codegen:playwright:all"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "description": "",
  "devDependencies": {
    "@types/jest": "^30.0.0",
    "cross-env": "^10.0.0",
    "nodemon": "^3.1.10",
    "npm-run-all": "^4.1.5",
    "rimraf": "^6.0.1",
    "spectral": "^0.0.0",
    "ts-morph": "^26.0.0",
    "vacuum": "^0.1.3"
  }
}