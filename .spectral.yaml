extends: ["spectral:oas"]

functions:
  - enforceCamundaKeys
  - enforceCamundaKeyPathParams
  - vendorExtensionWhitelist

rules:
  key-properties-must-extend-camunda-key:
    description: "Properties ending in 'Key' must use $ref (not primitive types like string)."
    message: "Property '{{property}}' must use $ref, not a primitive type. This is a CamundaKey property, so it must reference a schema that extends CamundaKey."
    given: $..properties[?(@property.match(/^[a-z].*Key$/))]
    severity: error
    then:
      function: enforceCamundaKeys
      functionOptions:
        exceptions:
          correlationKey
          itemKey

  key-property-ref-must-point-to-camundakey-or-subtype:
    description: "Properties ending in 'Key' must reference CamundaKey or a schema that extends it via allOf."
    message: "Key property '{{property}}' must reference CamundaKey or a schema that extends it."
    given: "$.paths..properties[?(@property.match(/^[a-z].*Key$/))]"
    severity: error
    then:
      function: pattern
      functionOptions:
        match: "#/components/schemas/(CamundaKey|[A-Za-z]+Key)$"

  key-path-params-must-use-ref:
    description: "Path parameters ending in 'Key' must use $ref to CamundaKey or a subtype."
    message: "Path parameter '{{value.name}}' must use $ref, not a primitive type. It should reference a schema extending CamundaKey."
    given: "$.paths[*][*].parameters[?(@.in=='path' && @.name.match(/Key$/))]"
    severity: error
    then:
      function: enforceCamundaKeyPathParams
      functionOptions:
        exceptions:
          - correlationKey

  vendor-extensions-whitelist:
    description: "Only approved vendor extensions are allowed."
    message: "{{error}}"
    given: "$"
    severity: error
    then:
      function: vendorExtensionWhitelist
      functionOptions:
        allowedExtensions:
          - "x-eventually-consistent"
          - "x-semantic-type"
          - "x-polymorphic-schema"

  endpoints-must-have-consistency-declaration:
    description: "All endpoints must have x-eventually-consistent vendor extension."
    message: "Endpoint is missing x-eventually-consistent declaration. All endpoints must explicitly declare either 'x-eventually-consistent: true' or 'x-eventually-consistent: false'."
    given: 
      - "$.paths[*].get"
      - "$.paths[*].post"
      - "$.paths[*].put"
      - "$.paths[*].patch"
      - "$.paths[*].delete"
      - "$.paths[*].head"
      - "$.paths[*].options"
      - "$.paths[*].trace"
    severity: error
    then:
      field: "x-eventually-consistent"
      function: defined

  no-path-level-consistency-declaration:
    description: "x-eventually-consistent must be declared at operation level, not path level."
    message: "Path has x-eventually-consistent declared at path level. This extension should only be declared at the individual operation level (get, post, put, etc.) to ensure proper granularity and avoid inheritance issues."
    given: "$.paths[*]['x-eventually-consistent']"
    severity: error
    then:
      function: falsy

overrides:
  - files:
      - "rest-api.yaml"
      - "rest-api.generated.yaml"
    rules: 
      key-path-params-must-use-ref: "off"
      key-property-ref-must-point-to-camundakey-or-subtype: "off"
      key-properties-must-extend-camunda-key: "off"
      endpoints-must-have-consistency-declaration: "off"